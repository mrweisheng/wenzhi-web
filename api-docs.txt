# 文智系统API文档

## 一、认证模块

### 1. 用户登录
POST /api/auth/login
描述: 用户登录获取令牌
请求参数:
  - username: 用户名(必填)
  - password: 密码(必填)
响应:
  {
    code: 0,
    data: {
      token: JWT访问令牌,
      refreshToken: JWT刷新令牌,
      expires: 过期时间戳,
      userInfo: {
        id: 用户ID,
        username: 用户名,
        role_id: 角色ID,
        real_name: 真实姓名,
        email: 邮箱,
        status: 状态,
        role: {
          id: 角色ID,
          role_name: 角色名称
        },
        menus: [菜单权限列表]
      }
    }
  }
错误响应:
  {
    code: 1,
    message: "用户名或密码错误"
  }

### 2. 获取当前用户信息
GET /api/auth/userInfo
描述: 获取当前登录用户的详细信息
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: {
      id: 用户ID,
      username: 用户名,
      role_id: 角色ID,
      real_name: 真实姓名,
      email: 邮箱,
      status: 状态,
      role: {
        id: 角色ID,
        role_name: 角色名称
      },
      menus: [菜单权限列表]
    }
  }
错误响应:
  {
    code: 1,
    message: "用户不存在"
  }

## 二、用户管理模块

### 1. 获取用户列表
GET /api/users
描述: 获取用户列表,支持条件查询
请求头:
  - Authorization: Bearer <token>
请求参数:
  - username: 用户名(可选,模糊查询)
  - role_id: 角色ID(可选)
  - status: 状态(可选)
响应:
  {
    code: 0,
    data: [
      {
        id: 用户ID,
        username: 用户名,
        role_id: 角色ID,
        role_name: 角色名称,
        real_name: 真实姓名,
        email: 邮箱,
        status: 状态
      }
    ]
  }

### 2. 创建用户
POST /api/users
描述: 创建新用户
请求头:
  - Authorization: Bearer <token>
请求参数:
  - username: 用户名(必填)
  - password: 密码(必填)
  - role_id: 角色ID(必填)
  - real_name: 真实姓名(可选)
  - email: 邮箱(可选)
  - status: 状态(可选)
响应:
  {
    code: 0,
    message: "创建成功"
  }
错误响应:
  {
    code: 1,
    message: "用户名已存在"
  }

### 3. 更新用户
PUT /api/users/:id
描述: 更新用户信息
请求头:
  - Authorization: Bearer <token>
请求参数:
  - username: 用户名(可选)
  - password: 密码(可选)
  - role_id: 角色ID(可选)
  - real_name: 真实姓名(可选)
  - email: 邮箱(可选)
  - status: 状态(可选)
响应:
  {
    code: 0,
    message: "更新成功"
  }
错误响应:
  {
    code: 1,
    message: "用户名已存在"
  }

### 4. 删除用户
DELETE /api/users/:id
描述: 删除用户
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    message: "删除成功"
  }

### 5. 更新用户状态
PUT /api/users/:id/status
描述: 更新用户状态(启用/禁用)
请求头:
  - Authorization: Bearer <token>
请求参数:
  - status: 状态(0-禁用,1-启用)
响应:
  {
    code: 0,
    message: "状态更新成功"
  }

## 三、角色管理模块

### 1. 获取角色列表
GET /api/roles
描述: 获取所有角色
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: [
      {
        id: 角色ID,
        role_name: 角色名称,
        created_at: 创建时间,
        updated_at: 更新时间
      }
    ]
  }

### 2. 创建角色
POST /api/roles
描述: 创建新角色
请求头:
  - Authorization: Bearer <token>
请求参数:
  - role_name: 角色名称(必填)
  - menu_ids: 菜单权限ID数组(可选)
响应:
  {
    code: 0,
    message: "创建成功"
  }
错误响应:
  {
    code: 1,
    message: "角色名已存在"
  }

### 3. 更新角色
PUT /api/roles/:id
描述: 更新角色信息和权限
请求头:
  - Authorization: Bearer <token>
请求参数:
  - role_name: 角色名称(可选)
  - menu_ids: 菜单权限ID数组(可选)
响应:
  {
    code: 0,
    message: "更新成功"
  }
错误响应:
  {
    code: 1,
    message: "角色名已存在"
  }

### 4. 删除角色
DELETE /api/roles/:id
描述: 删除角色(如果角色下有用户则不允许删除)
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    message: "删除成功"
  }
错误响应:
  {
    code: 1,
    message: "该角色下存在用户，无法删除"
  }

### 5. 获取角色菜单权限
GET /api/roles/:id/menus
描述: 获取指定角色的菜单权限列表
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: [
      {
        id: 菜单ID,
        name: 菜单名称,
        path: 路由路径,
        icon: 图标,
        sort: 排序号,
        parent_id: 父菜单ID,
        created_time: 创建时间
      }
    ]
  }

## 五、写手管理模块

### 1. 获取写手列表
GET /api/writers
描述: 获取写手列表,支持分页和条件查询
请求头:
  - Authorization: Bearer <token>
请求参数:
  - page: 页码(默认1)
  - pageSize: 每页条数(默认10)
  - writer_id: 写手ID(可选,精确匹配)
  - name: 写手姓名(可选,模糊匹配)
  - education: 学历(可选,精确匹配)
  - major: 专业(可选,模糊匹配)
  - writing_experience: 写作水平(可选,精确匹配)
  - starred: 是否星标(可选,布尔值)
  - processed: 是否已处理(可选,布尔值)
响应:
  {
    code: 0,
    data: {
      total: 总条数,
      list: [
        {
          id: 自增ID,
          writer_id: 写手ID,
          name: 姓名,
          education: 学历,
          major: 专业,
          writing_experience: 写作水平,
          specialized_content: 擅长内容,
          phone_1: 手机号1,
          phone_2: 手机号2,
          alipay_name: 支付宝姓名,
          alipay_account: 支付宝账号,
          id_number: 身份证号,
          ip_address: IP地址,
          starred: 是否星标,
          processed: 是否已处理,
          created_time: 创建时间,
          created_by: 创建人,
          last_modified_time: 最后修改时间,
          last_modified_by: 最后修改人
        }
      ]
    },
    message: "获取成功"
  }

### 2. 获取写手详情
GET /api/writers/:id
描述: 根据ID获取写手详细信息
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: {
      // 写手详细信息,字段同列表接口
    },
    message: "获取成功"
  }
错误响应:
  {
    code: 1,
    message: "写手不存在"
  }

### 3. 新增写手
POST /api/writers
描述: 新增写手信息
请求头:
  - Authorization: Bearer <token>
请求参数:
  - name: 姓名(必填)
  - education: 学历(必填)
  - major: 专业(必填)
  - writing_experience: 写作水平(必填,枚举值:大学水平/在职水平/事业单位水平/淘宝老手/在职老师/期刊报告科研)
  - specialized_content: 擅长内容(可选)
  - phone_1: 手机号1(可选)
  - phone_2: 手机号2(可选)
  - alipay_name: 支付宝姓名(可选)
  - alipay_account: 支付宝账号(可选)
  - id_number: 身份证号(可选)
  - ip_address: IP地址(可选)
响应:
  {
    code: 0,
    data: {
      id: 新增记录ID,
      writer_id: 系统生成的写手ID  // 格式: w + 年月日 + 序号(2位), 如 w24072001
    },
    message: "添加成功"
  }

### 4. 更新写手信息
PUT /api/writers/:id
描述: 更新写手信息
请求头:
  - Authorization: Bearer <token>
请求参数:
  - name: 姓名(可选)
  - education: 学历(可选)
  - major: 专业(可选)
  - writing_experience: 写作水平(可选)
  - specialized_content: 擅长内容(可选)
  - phone_1: 手机号1(可选)
  - phone_2: 手机号2(可选)
  - alipay_name: 支付宝姓名(可选)
  - alipay_account: 支付宝账号(可选)
  - id_number: 身份证号(可选)
  - starred: 是否星标(可选)
  - processed: 是否已处理(可选)
响应:
  {
    code: 0,
    message: "更新成功"
  }
错误响应:
  {
    code: 1,
    message: "写手不存在"
  }

### 5. 删除写手
DELETE /api/writers/:id
描述: 删除写手信息
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    message: "删除成功"
  }
错误响应:
  {
    code: 1,
    message: "写手不存在"
  }

### 6. 批量删除写手
DELETE /api/writers
描述: 批量删除写手信息
请求头:
  - Authorization: Bearer <token>
请求参数:
  - ids: 写手记录ID数组(必填,请求体参数)
请求体示例:
  {
    "ids": [1, 2, 3]
  }
响应:
  {
    code: 0,
    message: "删除成功"
  }

## 六、订单管理模块

### 1. 获取订单列表
GET /api/orders
描述: 获取订单列表,支持分页和条件查询
请求头:
  - Authorization: Bearer <token>
请求参数:
  - page: 页码(默认1)
  - pageSize: 每页条数(默认10)
  - order_id: 订单编号(可选,精确匹配)
  - payment_id: 支付单号(可选,精确匹配)
  - status: 订单状态(可选)
  - channel: 支付渠道(可选,支付宝/企业微信)
  - startTime: 开始时间(可选,订单创建时间范围)
  - endTime: 结束时间(可选,订单创建时间范围)
响应:
  {
    code: 0,
    data: {
      total: 总条数,
      list: [
        {
          order_id: 订单编号,
          payment_id: 支付单号,
          amount: 买家实付金额,
          status: 订单状态,
          create_time: 订单创建时间,
          merchant_remark: 商家备注,
          refund_amount: 卖家实退金额,
          fee: 手续费,
          channel: 渠道,
          confirm_time: 确认收货时间,
          merchant_payment: 打款商家金额,
          created_at: 记录创建时间,
          updated_at: 记录更新时间
        }
      ]
    },
    message: "获取成功"
  }

## 七、统计模块

### 1. 获取系统统计数据
GET /api/statistics
描述: 获取系统各项数据统计
请求头:
  - Authorization: Bearer <token>
响应:
  {
    code: 0,
    data: {
      userCount: 用户总数,
      menuCount: 菜单总数,
      roleCount: 角色总数,
      writerCount: 写手总数,
      orderCount: 订单总数
    },
    message: "获取成功"
  }